/*
Your next steps:
1. Run npm install. If your project did not install @microsoft/teamsfx package before, we have added it to package.json for you.
   You need to run the command under "bot" folder instead of project's root folder.
2. Replace "<your-api-scope>" in this file with actual scope required by the API.
3. Refer https://aka.ms/teamsfx-connect-api-with-aad for configuring AAD app and consent scopes.

You can now import the API client (an Axios instance) in another file and call fake APIs without worrying about authentication.
Here is an example for a GET request to "relative_path_of_target_api":
```
const { fakeClient } = require("relative_path_to_this_file");

const response = await fakeClient.get("relative_path_of_target_api");
// You only need to enter the relative path for your API.
// For example, if you want to call api https://my-api-endpoint/test, and inputted https://my-api-endpoint as API endpoint,
// the code will looks like: const response = await fakeClient.get("test");

const responseBody = response.data;
```

If you added this API while local debugging, please stop local debugging and start again because local debugging will not hot reload changes to .env.teamsfx.local

You can refer https://aka.ms/teamsfx-connect-api to learn more.
*/
const teamsfxSdk = require("@microsoft/teamsfx");

// Loads current app's configuration, the sample uses client credential flow to acquire token for your API.
const teamsFx = new teamsfxSdk.TeamsFx(teamsfxSdk.IdentityType.App);
// Initializes a new axios instance to call fake API.
const appCredential = teamsFx.getCredential();
const authProvider = new teamsfxSdk.BearerTokenAuthProvider(
  // Please replace '<your-api-scope>' with actual api scope value.
  async () => (await appCredential.getToken("<your-api-scope>")).token
);
const fakeClient = teamsfxSdk.createApiClient(
  teamsFx.getConfig("TEAMSFX_API_FAKE_ENDPOINT"),
  authProvider
);
module.exports.fakeClient = fakeClient;

/* 
Setting API configuration for cloud environment: 
We have already set the configuration to .env.teamsfx.local based on your answers. 
Before you deploy your code to cloud using TeamsFx, please follow https://aka.ms/teamsfx-add-appsettings to add following app settings with appropriate value to your Azure environment: 
TEAMSFX_API_FAKE_ENDPOINT

You can refer https://aka.ms/teamsfx-connect-api to learn more. 
*/